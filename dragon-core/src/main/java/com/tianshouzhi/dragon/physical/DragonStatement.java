package com.tianshouzhi.dragon.physical;

import com.tianshouzhi.dragon.common.jdbc.WrapperAdapter;

import java.sql.*;

/**
 * Created by tianshouzhi on 2018/1/28.
 */
public class DragonStatement extends WrapperAdapter implements Statement{
    protected Statement delegate;
    protected DragonConnection connection;

    public DragonStatement(Statement delegate, DragonConnection connection) {
        this.delegate = delegate;
        this.connection = connection;
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        try{
            return delegate.executeQuery(sql);
        }finally {
            connection.updateLastActiveTime();
        }
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        try{
            return delegate.executeUpdate(sql);
        }finally {
            connection.updateLastActiveTime();
        }
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        try{
            return delegate.executeUpdate(sql, autoGeneratedKeys);
        }finally {
            connection.updateLastActiveTime();
        }

    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        try{
            return delegate.executeUpdate(sql, columnIndexes);
        }finally {
            connection.updateLastActiveTime();
        }

    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        try{
            return delegate.executeUpdate(sql, columnNames);
        }finally {
            connection.updateLastActiveTime();
        }

    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        try{
            return delegate.execute(sql, autoGeneratedKeys);
        }finally {
            connection.updateLastActiveTime();
        }

    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        try{
            return delegate.execute(sql, columnIndexes);
        }finally {
            connection.updateLastActiveTime();
        }

    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        try{
            return delegate.execute(sql, columnNames);
        }finally {
            connection.updateLastActiveTime();
        }
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        try{
            return delegate.execute(sql);
        }finally {
            connection.updateLastActiveTime();
        }
    }


    @Override
    public int[] executeBatch() throws SQLException {
        try{
            return delegate.executeBatch();
        }finally {
            connection.updateLastActiveTime();
        }

    }

    @Override
    public void close() throws SQLException {
        delegate.close();
    }

    @Override
    public int getMaxFieldSize() throws SQLException {
        return delegate.getMaxFieldSize();
    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException {
        delegate.setMaxFieldSize(max);
    }

    @Override
    public int getMaxRows() throws SQLException {
        return delegate.getMaxRows();
    }

    @Override
    public void setMaxRows(int max) throws SQLException {
        delegate.setMaxRows(max);
    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException {
        delegate.setEscapeProcessing(enable);
    }

    @Override
    public int getQueryTimeout() throws SQLException {
        return delegate.getQueryTimeout();
    }

    @Override
    public void setQueryTimeout(int seconds) throws SQLException {
        delegate.setQueryTimeout(seconds);
    }

    @Override
    public void cancel() throws SQLException {
        delegate.cancel();
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return delegate.getWarnings();
    }

    @Override
    public void clearWarnings() throws SQLException {
        delegate.clearWarnings();
    }

    @Override
    public void setCursorName(String name) throws SQLException {
        delegate.setCursorName(name);
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        return delegate.getResultSet();
    }

    @Override
    public int getUpdateCount() throws SQLException {
        return delegate.getUpdateCount();
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        return delegate.getMoreResults();
    }

    @Override
    public void setFetchDirection(int direction) throws SQLException {
        delegate.setFetchDirection(direction);
    }

    @Override
    public int getFetchDirection() throws SQLException {
        return delegate.getFetchDirection();
    }

    @Override
    public void setFetchSize(int rows) throws SQLException {
        delegate.setFetchSize(rows);
    }

    @Override
    public int getFetchSize() throws SQLException {
        return delegate.getFetchSize();
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        return delegate.getResultSetConcurrency();
    }

    @Override
    public int getResultSetType() throws SQLException {
        return delegate.getResultSetType();
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        delegate.addBatch(sql);
    }

    @Override
    public void clearBatch() throws SQLException {
        delegate.clearBatch();
    }

    @Override
    public Connection getConnection() throws SQLException {
        return delegate.getConnection();
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException {
        return delegate.getMoreResults(current);
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        return delegate.getGeneratedKeys();
    }

    @Override
    public int getResultSetHoldability() throws SQLException {
        return delegate.getResultSetHoldability();
    }

    @Override
    public boolean isClosed() throws SQLException {
        return delegate.isClosed();
    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException {
        delegate.setPoolable(poolable);
    }

    @Override
    public boolean isPoolable() throws SQLException {
        return delegate.isPoolable();
    }

    @Override
    public void closeOnCompletion() throws SQLException {
        delegate.closeOnCompletion();
    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        return delegate.isCloseOnCompletion();
    }

    //JDK 8

    public long getLargeUpdateCount() throws SQLException {
        throw new UnsupportedOperationException("executeLargeUpdate not implemented");
    }

    public void setLargeMaxRows(long max) throws SQLException {
        throw new UnsupportedOperationException("setLargeMaxRows not implemented");
    }

    public long getLargeMaxRows() throws SQLException {
        throw new UnsupportedOperationException("getLargeMaxRows not implemented");

    }

    public long[] executeLargeBatch() throws SQLException {
        throw new UnsupportedOperationException("executeLargeBatch not implemented");

    }

    public long executeLargeUpdate(String sql) throws SQLException {
        throw new UnsupportedOperationException("executeLargeUpdate not implemented");

    }

    public long executeLargeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        throw new UnsupportedOperationException("executeLargeUpdate not implemented");

    }

    public long executeLargeUpdate(String sql, int[] columnIndexes) throws SQLException {
        throw new UnsupportedOperationException("executeLargeUpdate not implemented");

    }

    public long executeLargeUpdate(String sql, String[] columnNames) throws SQLException {
        throw new UnsupportedOperationException("executeLargeUpdate not implemented");
    }
}
